{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACXO;AACP;AACA;AACA,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;;;;;;UCzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6C;AACA;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAU;AACrB,IAAI,0DAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,0DAAU","sources":["webpack://ch17/./ex05/renderGrid.js","webpack://ch17/./ex05/updateGrid.js","webpack://ch17/webpack/bootstrap","webpack://ch17/webpack/runtime/define property getters","webpack://ch17/webpack/runtime/hasOwnProperty shorthand","webpack://ch17/webpack/runtime/make namespace object","webpack://ch17/./ex05/index.js"],"sourcesContent":["export function renderGrid(grid, ctx, ROWS, COLS, RESOLUTION) {\r\n    for (let row = 0; row < ROWS; row++) {\r\n        for (let col = 0; col < COLS; col++) {\r\n            const cell = grid[row][col];\r\n            ctx.beginPath();\r\n            ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\r\n            ctx.fillStyle = cell ? \"black\" : \"white\";\r\n            ctx.fill();\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}\r\n","export function updateGrid(grid, ROWS, COLS) {\r\n    const nextGrid = grid.map((arr) => [...arr]);\r\n\r\n    for (let row = 0; row < ROWS; row++) {\r\n        for (let col = 0; col < COLS; col++) {\r\n            const aroundSell = [\r\n                row > 0 && col > 0 ? grid[row - 1][col - 1] : false,\r\n                row > 0 ? grid[row - 1][col] : false,\r\n                row > 0 && col < COLS - 1 ? grid[row - 1][col + 1] : false,\r\n                col > 0 ? grid[row][col - 1] : false,\r\n                col < COLS - 1 ? grid[row][col + 1] : false,\r\n                row < ROWS - 1 && col > 0 ? grid[row + 1][col - 1] : false,\r\n                row < ROWS - 1 ? grid[row + 1][col] : false,\r\n                row < ROWS - 1 && col < COLS - 1 ? grid[row + 1][col + 1] : false,\r\n            ];\r\n\r\n            const trueCount = aroundSell.filter((value) => value === true).length;\r\n            if (grid[row][col] === false) {\r\n                nextGrid[row][col] = trueCount === 3;\r\n            } else {\r\n                nextGrid[row][col] = trueCount === 2 || trueCount === 3;\r\n            }\r\n        }\r\n    }\r\n    return nextGrid;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { renderGrid } from \"./renderGrid.js\";\r\nimport { updateGrid } from \"./updateGrid.js\";\r\n\r\nconst ROWS = 50;\r\nconst COLS = 50;\r\nconst RESOLUTION = 10;\r\n\r\nconst canvas = document.querySelector(\"#screen\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst startButton = document.querySelector(\"#start\");\r\nconst pauseButton = document.querySelector(\"#pause\");\r\n\r\ncanvas.width = ROWS * RESOLUTION;\r\ncanvas.height = COLS * RESOLUTION;\r\n\r\nlet animationId = null;\r\nconst sound = new Audio(\"./decision1.mp3\");\r\n\r\nlet grid = new Array(ROWS)\r\n  .fill(null)\r\n  .map(() => new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2)));\r\n\r\ncanvas.addEventListener(\"click\", function (evt) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\r\n\r\n  const row = Math.floor(pos.y / RESOLUTION);\r\n  const col = Math.floor(pos.x / RESOLUTION);\r\n  grid[row][col] = !grid[row][col];\r\n  sound.cloneNode().play();\r\n  renderGrid(grid, ctx, ROWS, COLS, RESOLUTION);\r\n});\r\n\r\nlet lastTime = 0;\r\nconst fps = 60;\r\nconst interval = 1000 / fps;\r\nfunction update(timestamp) {\r\n  if (!lastTime) lastTime = timestamp;\r\n  const deltaTime = timestamp - lastTime;\r\n\r\n  if (deltaTime >= interval) {\r\n    grid = updateGrid(grid, ROWS, COLS);\r\n    renderGrid(grid, ctx, ROWS, COLS, RESOLUTION);\r\n    lastTime = timestamp;\r\n  }\r\n\r\n  animationId = requestAnimationFrame(update);\r\n}\r\n\r\nstartButton.addEventListener(\"click\", () => {\r\n  if (animationId) return;\r\n  update();\r\n});\r\n\r\npauseButton.addEventListener(\"click\", () => {\r\n  if (!animationId) return;\r\n  cancelAnimationFrame(animationId);\r\n  animationId = null;\r\n});\r\n\r\nrenderGrid(grid, ctx, ROWS, COLS, RESOLUTION);\r\n"],"names":[],"sourceRoot":""}